
    // Evento de clique para carregar documentos de auditoria
      // document.getElementById('carregarDocumentosAuditoriaBtn').addEventListener('click', function() {
         // fetch("{% url '' %}", {
           //   method: 'GET',
             // headers: {
               //   'Content-Type': 'application/json',
                 // 'X-CSRFToken': getCookie('csrftoken')
             // }
        //  })
          //.then(response => {
          //    if (!response.ok) {
            //      throw new Error('Falha na rede com status: ' + response.status);
              //}
              //return response.json();
          //})
          //.then(data => {
            //  document.getElementById('statusUpdateAuditoria').textContent = 'Documentos de auditoria processados: ' + data.documentos_processados;
          //})
          //.catch(error => {
            //  console.error('Erro ao carregar documentos de auditoria:', error);
              //document.getElementById('statusUpdateAuditoria').textContent = 'Erro ao carregar: ' + error.message;
          //});
      //});


{% extends "base.html" %}
{% load static %}


{% block extra_css %}
<link rel="stylesheet" href='{% static "\bootstrap\css\relatorios.css" %}'>
{% endblock %}



{% block content %}

    </script>


    <nav class="menu-lateral">
        <div class="btn-expandir">
            <i class="bi bi-list" id="btn-exp"></i>
        </div>

        <ul>
            <h1>
                <i class="bi bi-layout-text-window"></i>
                <span>RELATÓRIOS</span>
            </h1>
            <li class="item-menu" data-target="documentosPendentesForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos Pendentes</span>
                </a>
            </li>
            <li class="item-menu" data-target="documentosExistentesForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos Existentes</span>
                </a>
            </li>

            <li class="item-menu" id="PendenciasASO" data-target="PendenciasASOForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Pendências ASO</span>
                </a>
            </li>

            <li class="item-menu" id="PontoInexistentes" data-target="PontoInexistentesForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Cartões de Ponto Inexistentes</span>
                </a>
            </li>

            <li class="item-menu" id="DocumentosVencidos" data-target="DocumentosVencidosForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos Vencidos</span>
                </a>
            </li>

            <li class="item-menu" id="documentosAVencerItem" data-target="documentosAVencerForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos a Vencer</span>
                </a>
            </li>

            <!-- <li class="item-menu" id="DocumentosAuditorias" data-target="DocumentosAuditoriasForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos para Auditorias</span>
                </a>
            </li> -->

            <!--<li class="item-menu" id="documentosAVencerItem" data-target="documentosAVencerForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos Existentes para Auditorias</span>
                </a>
            </li>-->
            <h1>
                <i class="bi bi-sliders"></i>
                <span>GERENCIAL</span>
            </h1>
            <li class="item-menu" id="RelatoriosGerenciais" data-target="RelatoriosGerenciaisForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">RELATÓRIOS GERENCIAIS</span>
                </a>
            </li>
            <h1>
                <i class="bi bi-clipboard-data"></i>
                <span>BI</span>
            </h1>
            <li class="item-menu">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Dashboard BI</span>
                </a>
            </li>
        </ul>
    </nav>

    <div id="documentosPendentesForm" class="form-container">
        <div class="subheader2">
            <p>DOCUMENTOS PENDENTES</p>
        </div>
        <form>
            <div class="form-row">
                <select id="empresa" name="empresa" onclick="carregarEmpresas()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="empresa">Empresa</label>
            </div>
            <div class="form-row">
                <select id="Regional" name="Regional" onclick="carregarRegional()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="Regional">Regional</label>
            </div>
            <div class="form-row">
                <select id="Unidade" name="Unidade" onclick="carregarUnidade()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="Unidade">Unidade</label>
            </div>
            <div class="form-row">
                <input type="text" id="nome" name="nome" required>
                <label for="nome">Nome do Colaborador</label>
            </div>

            <div class="form-row">
                <input type="text" id="matricula" name="matricula" required>
                <label for="matricula">Matrícula</label>
            </div>
            <div class="form-row">
                <input type="text" id="cpf" name="cpf" required>
                <label for="cpf">CPF</label>
            </div>
             <div class="form-row">
                <select id="Cargo" name="Cargo" onclick="carregarCargo()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="Cargo">Cargo</label>
            </div>
            <div class="form-row">
                <div class="date-row">
                    <input type="text" id="admissao" placeholder="admissao" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                </div>
                <div class="date-row">
                    <input type="text" id="desligamento" placeholder="desligamento" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                </div>
            </div>

            <div class="form-row">
                <select id="situacao" name="situacao" onclick="carregarSituacoes()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="situacao">Situação</label>
            </div>
            <div class="form-row">
                <select id="Tipo_de_Documento" name="Tipo_de_Documento" onclick="carregarTipoDeDocumento()" required>
                    <option value="" disabled selected></option>
                </select>
                <label for="Tipo_de_Documento">Tipo de Documento</label>
            </div>

            <div class="form-row button-row">
                <button id="pesquisar" type="button">Pesquisar</button>
            </div>
        </form>
    </div>

    </div>
    <!--script>
        document.getElementById('admissao').addEventListener('blur', function() {
            if (this.value !== '') {
                var parts = this.value.split('-');
                var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                this.value = formattedDate;
            }
        });
        document.getElementById('desligamento').addEventListener('blur', function() {
            if (this.value !== '') {
                var parts = this.value.split('-');
                var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                this.value = formattedDate;
            }
        });
        </script-->
    <div class="sidebar">
        <button class="close-btn">Fechar</button>
        <div class="table-container">
            <div class="subheader3">
                <p>RELATÓRIOS</p>
            </div>
            <div class="export-buttons">
              <select id="exportFormat">
                  <option value="xlsx">Exportar para XLSX</option>
                  <option value="csv">Exportar para CSV</option>
                  <option value="pdf">Exportar para PDF</option>
              </select>
              <button onclick="authenticateDownload()"><i class="bi bi-download"></i></button>
            </div>

            <div class="search-container">
              <input type="text" id="searchInput" placeholder="Pesquisar...">
            </div>
                <div class="rows-per-page">
                    <label for="rowsPerPage">Linhas por página:</label>
                    <select id="rowsPerPage" onchange="changeRowsPerPage()">
                      <option value="8">8</option>
                      <option value="10" selected>10</option>
                      <option value="15">15</option>
                      <option value="20">20</option>
                      <option value="40">40</option>
                      <option value="100">100</option>
                  </select>
                </div>
            <table id="tabela-relatorio">
                <thead>
                    <tr>
                        <th>Empresa</th>
                        <th>Regional</th>
                        <th>Unidade</th>
                        <th>Nome do Colaborador</th>
                        <th>Matrícula</th>
                        <th>CPF</th>
                        <th>Cargo</th>
                        <th>Admissão</th>
                        <th>Desligamento</th>
                        <th>Situação</th>
                        <th>Tipo de Documento</th>
                        <th>Visualizar</th> <!-- Nova coluna -->
                    </tr>
                </thead>
                <tbody>
                    <!-- Os dados da tabela serão preenchidos dinamicamente aqui -->
                </tbody>
            </table>
            <div class="pagination" id="pagination">
                <button id="previous-page">&lt; < </button>
                <span id="page-info"></span>
                <button id="next-page"> > &gt;</button>
            </div>
        </div>

    </div>


    <!--script>
        // Variável global para armazenar os dados obtidos da API
        let dadosAPI = null;

        // Função para carregar os dados da API
        function carregarDadosAPI() {
            fetch('{% url "carregar_relatorio_pendente_sem_situacao" %}')
                .then(response => response.json())
                .then(data => {
                    dadosAPI = data;
                    // Chama todas as funções para carregar os campos
                    carregarEmpresas();
                    carregarRegionais();
                    carregarUnidades();
                    carregarCargos();
                    carregarSituacoes();
                    carregarTipoDeDocumento();
                })
                .catch(error => {
                    console.error('Ocorreu um erro ao carregar os dados da API:', error);
                });
        }

        // Chama a função para carregar os dados da API quando a página é carregada
        carregarDadosAPI();

        // Função para carregar as empresas
        function carregarEmpresas() {
            const selectEmpresa = document.getElementById('empresa');
            const empresasSet = new Set(); // Conjunto para armazenar empresas únicas

            // Adiciona as empresas únicas ao conjunto
            dadosAPI.forEach(pendente => {
                empresasSet.add(pendente.empresa);
            });

            // Limpa as opções existentes
            selectEmpresa.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectEmpresa.appendChild(optionPadrao);

            // Adiciona as empresas únicas ao select
            empresasSet.forEach(empresa => {
                const option = document.createElement('option');
                option.value = empresa;
                option.textContent = empresa;
                selectEmpresa.appendChild(option);
            });

            // Verifica se há um valor selecionado previamente e o define como selecionado novamente
            const valorSelecionado = selectEmpresa.dataset.valorSelecionado; // Obtém o valor selecionado anteriormente
            if (valorSelecionado) {
                selectEmpresa.value = valorSelecionado; // Define o valor selecionado novamente
            }

            // Adiciona um evento de mudança ao dropdown de empresas
            selectEmpresa.addEventListener('change', function() {
                // Armazena o valor selecionado em um atributo de dataset
                selectEmpresa.dataset.valorSelecionado = selectEmpresa.value;
            });
        }

        // Função para carregar as regionais
        function carregarRegionais() {
            const selectRegional = document.getElementById('Regional');
            const regionaisSet = new Set(); // Conjunto para armazenar regionais únicas

            // Adiciona as regionais únicas ao conjunto
            dadosAPI.forEach(item => {
                regionaisSet.add(item.regional);
            });

            // Limpa as opções existentes
            selectRegional.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectRegional.appendChild(optionPadrao);

            // Adiciona as regionais únicas ao select
            regionaisSet.forEach(regional => {
                const option = document.createElement('option');
                option.value = regional;
                option.textContent = regional;
                selectRegional.appendChild(option);
            });
        }

        // Função para carregar as unidades
        function carregarUnidades() {
            const selectUnidade = document.getElementById('Unidade');
            const unidadesSet = new Set(); // Conjunto para armazenar unidades únicas

            // Adiciona as unidades únicas ao conjunto
            dadosAPI.forEach(item => {
                unidadesSet.add(item.unidade);
            });

            // Limpa as opções existentes
            selectUnidade.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectUnidade.appendChild(optionPadrao);

            // Adiciona as unidades únicas ao select
            unidadesSet.forEach(unidade => {
                const option = document.createElement('option');
                option.value = unidade;
                option.textContent = unidade;
                selectUnidade.appendChild(option);
            });
        }

        // Função para carregar os cargos
        function carregarCargos() {
            const selectCargo = document.getElementById('Cargo');
            const cargosSet = new Set(); // Conjunto para armazenar cargos únicos

            // Adiciona os cargos únicos ao conjunto
            dadosAPI.forEach(item => {
                cargosSet.add(item.cargo);
            });

            // Limpa as opções existentes
            selectCargo.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectCargo.appendChild(optionPadrao);

            // Adiciona os cargos únicos ao select
            cargosSet.forEach(cargo => {
                const option = document.createElement('option');
                option.value = cargo;
                option.textContent = cargo;
                selectCargo.appendChild(option);
            });
        }

        // Função para carregar as situações
        function carregarSituacoes() {
            const selectSituacao = document.getElementById('situacao');
            const situacoesSet = new Set(); // Conjunto para armazenar situações únicas

            // Adiciona as situações únicas ao conjunto
            dadosAPI.forEach(item => {
                situacoesSet.add(item.situacao);
            });

            // Limpa as opções existentes
            selectSituacao.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectSituacao.appendChild(optionPadrao);

            // Adiciona as situações únicas ao select
            situacoesSet.forEach(situacao => {
                const option = document.createElement('option');
                option.value = situacao;
                option.textContent = situacao;
                selectSituacao.appendChild(option);
            });

            // Verifica se há um valor selecionado previamente e o define como selecionado novamente
            const valorSelecionadoSituacao = selectSituacao.dataset.valorSelecionado; // Obtém o valor selecionado anteriormente
            if (valorSelecionadoSituacao) {
                selectSituacao.value = valorSelecionadoSituacao; // Define o valor selecionado novamente
            }

            // Adiciona um evento de mudança ao dropdown de situações
            selectSituacao.addEventListener('change', function() {
                // Armazena o valor selecionado em um atributo de dataset
                selectSituacao.dataset.valorSelecionado = selectSituacao.value;
            });
        }

        // Função para carregar os tipos de documento
        function carregarTipoDeDocumento() {
            const selectTipoDeDocumento = document.getElementById('Tipo_de_Documento');
            const tiposDeDocumentoSet = new Set(); // Conjunto para armazenar tipos de documento únicos

            // Adiciona os tipos de documento únicos ao conjunto
            dadosAPI.forEach(item => {
                tiposDeDocumentoSet.add(item.tipo_documento); // Alterado aqui para acessar 'item.tipo_documento'
            });

            // Limpa as opções existentes
            selectTipoDeDocumento.innerHTML = '';

            // Adiciona a opção padrão
            const optionPadrao = document.createElement('option');
            optionPadrao.value = '';
            optionPadrao.textContent = '';
            selectTipoDeDocumento.appendChild(optionPadrao);

            // Adiciona os tipos de documento únicos ao select
            tiposDeDocumentoSet.forEach(tipoDeDocumento => {
                const option = document.createElement('option');
                option.value = tipoDeDocumento;
                option.textContent = tipoDeDocumento;
                selectTipoDeDocumento.appendChild(option);
            });

            // Verifica se há um valor selecionado previamente e o define como selecionado novamente
            const valorSelecionadoTipoDocumento = selectTipoDeDocumento.dataset.valorSelecionado; // Obtém o valor selecionado anteriormente
            if (valorSelecionadoTipoDocumento) {
                selectTipoDeDocumento.value = valorSelecionadoTipoDocumento; // Define o valor selecionado novamente
            }

            // Adiciona um evento de mudança ao dropdown de tipos de documento
            selectTipoDeDocumento.addEventListener('change', function() {
                // Armazena o valor selecionado em um atributo de dataset
                selectTipoDeDocumento.dataset.valorSelecionado = selectTipoDeDocumento.value;
            });
        }

    </script-->







    <!--script>
        // Variáveis para controlar a paginação
        let currentPage = 1;
        let totalPages = 1;
        let itemsPerPage = 8; // Definindo itemsPerPage no escopo global


        document.getElementById('pesquisar').addEventListener('click', function() {
    // Capturar os valores dos campos do formulário
    const empresa = document.getElementById('empresa').value;
    const regional = document.getElementById('Regional').value;
    const unidade = document.getElementById('Unidade').value;
    const nome = document.getElementById('nome').value.toLowerCase();
    const matricula = document.getElementById('matricula').value.toLowerCase();
    const cpf = document.getElementById('cpf').value.toLowerCase();
    const cargo = document.getElementById('Cargo').value;
    const admissao = document.getElementById('admissao').value;
    const desligamento = document.getElementById('desligamento').value;
    const situacao = document.getElementById('situacao').value;
    const tipoDocumento = document.getElementById('Tipo_de_Documento').value;

    // Chamar a URL para obter os dados
    fetch('{% url "carregar_relatorio_pendente_sem_situacao" %}')
        .then(response => response.json())
        .then(data => {
            // Filtrar os dados com base nos valores dos campos do formulário
            const filteredData = data.filter(pendente =>
                (empresa === '' || pendente.empresa === empresa) &&
                (regional === '' || pendente.regional === regional) &&
                (unidade === '' || pendente.unidade === unidade) &&
                (nome === '' || pendente.nome.toLowerCase().includes(nome)) &&
                (matricula === '' || pendente.matricula.toLowerCase().includes(matricula)) &&
                (cpf === '' || pendente.cpf.toLowerCase().includes(cpf)) &&
                (cargo === '' || pendente.cargo === cargo) &&
                (admissao === '' || pendente.admissao === admissao) &&
                (desligamento === '' || pendente.desligamento === desligamento) &&
                (situacao === '' || pendente.situacao === situacao) &&
                (tipoDocumento === '' || pendente.tipo_documento === tipoDocumento)
            );

            // Atualizar a tabela com os dados filtrados
            const totalItems = filteredData.length;
            totalPages = Math.ceil(totalItems / itemsPerPage);
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;

            const tabela = document.getElementById('tabela-relatorio');
            const tbody = tabela.getElementsByTagName('tbody')[0];
            tbody.innerHTML = ''; // Limpar qualquer conteúdo anterior na tabela

            // Exibir os dados filtrados na tabela
            for (let i = start; i < end && i < filteredData.length; i++) {
                const pendente = filteredData[i];
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${pendente.empresa}</td>
                    <td>${pendente.regional}</td>
                    <td>${pendente.unidade}</td>
                    <td>${pendente.nome}</td>
                    <td>${pendente.matricula}</td>
                    <td>${pendente.cpf}</td>
                    <td>${pendente.cargo}</td>
                    <td>${pendente.admissao}</td>
                    <td>${pendente.desligamento}</td>
                    <td>${pendente.situacao}</td>
                    <td>${pendente.tipo_documento}</td>
                    <td><i class="bi bi-search" onclick="visualizarDetalhes('${pendente.id}', '${pendente.empresa}', '${pendente.regional}', '${pendente.unidade}', '${pendente.nome}', '${pendente.matricula}', '${pendente.cpf}', '${pendente.cargo}', '${pendente.admissao}', '${pendente.desligamento}', '${pendente.situacao}', '${pendente.tipo_documento}')"></i></td> //< Ícone de visualização >
                `;
                tbody.appendChild(row);
            }

            document.getElementById('page-info').innerText = ` ${currentPage}/${totalPages} `;

            // Exibe a barra lateral após carregar os dados
            document.querySelector('.sidebar').classList.add('active');
        })
        .catch(error => {
            console.error('Erro ao carregar os dados:', error);
        });
});


        document.querySelector('.close-btn').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.remove('active');
        });

        document.getElementById('previous-page').addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                document.getElementById('pesquisar').click(); // Recarrega os dados da página anterior
            }
        });

        document.getElementById('next-page').addEventListener('click', function() {
            if (currentPage < totalPages) {
                currentPage++;
                document.getElementById('pesquisar').click(); // Recarrega os dados da próxima página
            }
        });

        function visualizarDetalhes(id, empresa, regional, unidade, nome, matricula, cpf, cargo, admissao, desligamento, situacao, tipoDocumento) {
            const nomeColaborador = encodeURIComponent(nome); // Codifica o nome do colaborador para ser usado na URL
            const url = `{% url 'dados_pessoais' %}?id=${id}&empresa=${empresa}&regional=${regional}&unidade=${unidade}&colaborador=${nomeColaborador}&matricula=${matricula}&cpf=${cpf}&cargo=${cargo}&admissao=${admissao}&desligamento=${desligamento}&situacao=${situacao}&tipoDocumento=${tipoDocumento}`;
            window.location.href = url;
        }
    </script-->






        <div id="documentosExistentesForm" class="form-container">
            <div class="subheader2">
                <p>DOCUMENTOS EXISTENTES</p>
            </div>
            <form>
                <div class="form-row">
                    <select id="empresaDocumentos" name="empresaDocumentos" placeholder="Empresa" onclick="carregarEmpresas()">
                        <option value="empresa" disabled selected>Empresa</option>
                    </select>
                </div>
                <div class="form-row">
                    <select id="regionalDocumentos" name="regionalDocumentos" placeholder="Regional" onclick="carregarRegional()">
                        <option value="regional" disabled selected>Regional</option>
                    </select>
                </div>
                <div class="form-row">
                    <select id="unidadeDocumentos" name="unidadeDocumentos" placeholder="Unidade" onclick="carregarUnidade()">
                        <option value="unidade" disabled selected>Unidade</option>
                    </select>
                </div>
                <div class="form-row">
                    <input type="text" id="nomeDocumento" name="nomeDocumento" placeholder="Nome do Colaborador">
                </div>
                <div class="form-row">
                    <input type="text" id="matriculaDocumento" name="matriculaDocumento" placeholder="Matrícula">
                </div>
                <div class="form-row">
                    <input type="text" id="cpfDocumento" name="cpfDocumento" placeholder="CPF">
                </div>
                <div class="form-row">
                    <select id="cargoDocumentos" name="cargoDocumentos" placeholder="Cargo" onclick="carregarCargo()">
                        <option value="cargo" disabled selected>Cargo</option>
                    </select>
                </div>
                <div class="form-row">
                    <div class="date-row">
                        <input type="text" id="admissaoDocumento" placeholder="Admissão" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                    </div>
                    <div class="date-row">
                        <input type="text" id="desligamentoDocumento" placeholder="Desligamento" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                    </div>
                </div>
                <div class="form-row">
                    <select id="situacaoDocumento" name="situacaoDocumento" placeholder="Situação"></select>
                </div>
                <div class="form-row">
                    <select id="tipoDocumento" name="tipoDocumento" placeholder="Tipo de Documento" onclick="carregarTipoDeDocumento()">
                        <option value="tipoDocumento" disabled selected>Tipo de Documento</option>
                    </select>
                </div>
                <div class="form-row button-row">
                    <button id="pesquisarExistentes" type="button">Pesquisar</button>
                </div>
            </form>
        </div>
        <!--script>
            document.getElementById('admissaoDocumento').addEventListener('blur', function() {
                if (this.value !== '') {
                    var parts = this.value.split('-');
                    var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                    this.value = formattedDate;
                }
            });
            document.getElementById('desligamentoDocumento').addEventListener('blur', function() {
                if (this.value !== '') {
                    var parts = this.value.split('-');
                    var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                    this.value = formattedDate;
                }
            });
            </script-->
<!--script>
    // Função para converter uma string de data no formato "dd/mm/yyyy" para um objeto Date
    function parseDate(dateString) {
        const [day, month, year] = dateString.split('/');
        return new Date(year, month - 1, day); // Mês é base 0 no objeto Date
    }

    // Função para verificar se duas datas são iguais (apenas ano, mês e dia)
    function datasIguais(data1, data2) {
        return (
            data1.getFullYear() === data2.getFullYear() &&
            data1.getMonth() === data2.getMonth() &&
            data1.getDate() === data2.getDate()
        );
    }

    // Função para abrir o sidebar e preencher a tabela com os dados da view
    function openSidebarAndFillTable() {
        // Selecionando a empresa, regional, unidade, nome do colaborador, matrícula do colaborador, CPF do colaborador, cargo do colaborador, data de admissão e data de desligamento do colaborador
        const selectedEmpresa = document.getElementById('empresaDocumentos').value;
        const selectedRegional = document.getElementById('regionalDocumentos').value;
        const selectedUnidade = document.getElementById('unidadeDocumentos').value;
        const nomeColaborador = document.getElementById('nomeDocumento').value.trim().toLowerCase(); // Convertendo para minúsculas e removendo espaços extras
        const matriculaColaborador = document.getElementById('matriculaDocumento').value.trim(); // Removendo espaços extras
        const cpfColaborador = document.getElementById('cpfDocumento').value.trim(); // Removendo espaços extras
        const selectedCargo = document.getElementById('cargoDocumentos').value;
        const admissaoColaborador = document.getElementById('admissaoDocumento').value; // Obtendo a data de admissão
        const desligamentoColaborador = document.getElementById('desligamentoDocumento').value; // Obtendo a data de desligamento
        const selectedSituacao = document.getElementById('situacaoDocumento').value; // Obtendo a situação selecionada
        const selectedTipoDocumento = document.getElementById('tipoDocumento').value; // Obtendo o tipo de documento selecionado

        // Convertendo a data de admissão e desligamento para objetos Date, se estiverem preenchidas
        const admissaoColaboradorDate = admissaoColaborador ? parseDate(admissaoColaborador) : null;
        const desligamentoColaboradorDate = desligamentoColaborador ? parseDate(desligamentoColaborador) : null;

        // Verificando se um nome de colaborador foi inserido
        const nomeFiltrado = nomeColaborador !== '';

        // Fazendo uma requisição AJAX para a view
        const xhr = new XMLHttpRequest();
        xhr.open('GET', "{% url 'relatorio_existente_todos_sem_situacao' %}", true); // Substitua '/url/da/view' pela URL correta da sua view
        xhr.onload = function () {
            if (xhr.status >= 200 && xhr.status < 300) {
                const data = JSON.parse(xhr.responseText);

                // Selecionando o corpo da tabela
                const tbody = document.querySelector('#tabela-relatorio tbody');
                tbody.innerHTML = ''; // Limpa o conteúdo atual da tabela

                // Iterando sobre os dados e preenchendo a tabela
                for (const situacao in data) {
                    if (data.hasOwnProperty(situacao)) {
                        data[situacao].forEach(function (item) {
                            // Verificando se a empresa, regional, unidade, nome do colaborador, matrícula do colaborador, CPF do colaborador, cargo do colaborador, data de admissão e data de desligamento do colaborador na linha da tabela correspondem aos valores selecionados e inseridos
                            const nomeColaboradorValido = nomeFiltrado ? item.nome.toLowerCase().includes(nomeColaborador) : true;
                            const matriculaColaboradorValida = matriculaColaborador !== '' ? item.matricula === matriculaColaborador : true;
                            const cpfColaboradorValido = cpfColaborador !== '' ? item.cpf === cpfColaborador : true;
                            const cargoColaboradorValido = selectedCargo !== '' ? item.cargo === selectedCargo : true;
                            const admissaoColaboradorValida = admissaoColaborador ? datasIguais(parseDate(item.admissao), admissaoColaboradorDate) : true;
                            const desligamentoColaboradorValido = desligamentoColaborador ? datasIguais(parseDate(item.desligamento), desligamentoColaboradorDate) : true;
                            const situacaoValida = selectedSituacao !== '' ? item.situacao === selectedSituacao : true;
                            const tipoDocumentoValido = selectedTipoDocumento !== '' ? item.documento === selectedTipoDocumento : true;

                            if ((selectedEmpresa === '' || item.empresa === selectedEmpresa) &&
                                (selectedRegional === '' || item.regional === selectedRegional) &&
                                (selectedUnidade === '' || item.unidade === selectedUnidade) &&
                                nomeColaboradorValido && matriculaColaboradorValida && cpfColaboradorValido && cargoColaboradorValido && admissaoColaboradorValida && desligamentoColaboradorValido && situacaoValida && tipoDocumentoValido) {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${item.empresa}</td>
                                    <td>${item.regional}</td>
                                    <td>${item.unidade}</td>
                                    <td>${item.nome}</td>
                                    <td>${item.matricula}</td>
                                    <td>${item.cpf}</td>
                                    <td>${item.cargo}</td>
                                    <td>${item.admissao}</td>
                                    <td>${item.desligamento}</td>
                                    <td>${item.situacao}</td>
                                    <td>${item.documento}</td>
                                    <td><i class="bi bi-search"></td>
                                `;
                                tbody.appendChild(row);
                            }
                        });
                    }
                }

                // Abrindo a sidebar após preencher a tabela
                const sidebar = document.querySelector('.sidebar');
                sidebar.classList.add('active');
            } else {
                console.error('Erro ao carregar os dados da view');
            }
        };
        xhr.send();
    }

    // Adicionando evento de clique ao botão de pesquisar
    const pesquisarBtn = document.getElementById('pesquisarExistentes');
    pesquisarBtn.addEventListener('click', openSidebarAndFillTable);

    // Função para visualizar o documento (substitua por sua lógica real)
    function visualizarDocumento(id) {
        console.log('Visualizando documento com o ID:', id);
    }

    // Função para fechar o sidebar
    function closeSidebar() {
        const sidebar = document.querySelector('.sidebar');
        sidebar.classList.remove('active');
    }

    // Adicionando evento de clique ao botão de fechar
    const closeBtn = document.querySelector('.close-btn');
    closeBtn.addEventListener('click', closeSidebar);

    </script-->




        <!--script>
            $(document).ready(function() {
                // Função para carregar as opções de empresas, regiões, unidades, cargos, situações e tipos de documento
                function carregarOpcoes() {
                    $.ajax({
                        url: "{% url 'relatorio_existente_todos_sem_situacao' %}",
                        type: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            // Criar conjuntos para armazenar empresas, regiões, unidades, cargos, situações e tipos de documento únicos
                            var empresasSet = new Set();
                            var regioesSet = new Set();
                            var unidadesSet = new Set();
                            var cargosSet = new Set();
                            var situacoesSet = new Set();
                            var tiposDocumentoSet = new Set();

                            // Adicionar empresas, regiões, unidades, cargos, situações e tipos de documento únicos aos conjuntos
                            Object.keys(data).forEach(function(status) {
                                data[status].forEach(function(pendente) {
                                    empresasSet.add(pendente.empresa);
                                    regioesSet.add(pendente.regional);
                                    unidadesSet.add(pendente.unidade);
                                    cargosSet.add(pendente.cargo);
                                    situacoesSet.add(pendente.situacao);
                                    tiposDocumentoSet.add(pendente.documento);
                                });
                            });

                            // Limpar as opções de empresas, regiões, unidades, cargos, situações e tipos de documento existentes
                            $('#empresaDocumentos').empty().append('<option value="" disabled selected>Empresa</option>');
                            $('#regionalDocumentos').empty().append('<option value="" disabled selected>Regional</option>');
                            $('#unidadeDocumentos').empty().append('<option value="" disabled selected>Unidade</option>');
                            $('#cargoDocumentos').empty().append('<option value="" disabled selected>Cargo</option>');
                            $('#situacaoDocumento').empty().append('<option value="" disabled selected>Situação</option>');
                            $('#tipoDocumento').empty().append('<option value="" disabled selected>Tipo de Documento</option>');

                            // Adicionar as novas opções baseadas nas empresas únicas
                            empresasSet.forEach(function(empresa) {
                                $('#empresaDocumentos').append($('<option>', {
                                    value: empresa,
                                    text: empresa
                                }));
                            });

                            // Adicionar as novas opções baseadas nas regiões únicas
                            regioesSet.forEach(function(regional) {
                                $('#regionalDocumentos').append($('<option>', {
                                    value: regional,
                                    text: regional
                                }));
                            });

                            // Adicionar as novas opções baseadas nas unidades únicas
                            unidadesSet.forEach(function(unidade) {
                                $('#unidadeDocumentos').append($('<option>', {
                                    value: unidade,
                                    text: unidade
                                }));
                            });

                            // Adicionar as novas opções baseadas nos cargos únicos
                            cargosSet.forEach(function(cargo) {
                                $('#cargoDocumentos').append($('<option>', {
                                    value: cargo,
                                    text: cargo
                                }));
                            });

                            // Adicionar as novas opções baseadas nas situações únicas
                            situacoesSet.forEach(function(situacao) {
                                $('#situacaoDocumento').append($('<option>', {
                                    value: situacao,
                                    text: situacao
                                }));
                            });

                            // Adicionar as novas opções baseadas nos tipos de documento únicos
                            tiposDocumentoSet.forEach(function(tipoDocumento) {
                                $('#tipoDocumento').append($('<option>', {
                                    value: tipoDocumento,
                                    text: tipoDocumento
                                }));
                            });
                        },
                        error: function() {
                            // Em caso de erro, você pode lidar com isso aqui
                            console.error('Erro ao carregar as empresas, regiões, unidades, cargos, situações e tipos de documento.');
                        }
                    });
                }

                // Chamar a função carregarOpcoes assim que a página é carregada
                carregarOpcoes();

                // Função para carregar informações relacionadas à empresa selecionada
                $('#empresaDocumentos').on('change', function() {
                    carregarInformacoesEmpresa();
                });

                // Função para carregar informações relacionadas à região selecionada
                $('#regionalDocumentos').on('change', function() {
                    carregarInformacoesRegional();
                });

                // Função para carregar informações relacionadas à unidade selecionada
                $('#unidadeDocumentos').on('change', function() {
                    carregarInformacoesUnidade();
                });

                // Função para carregar informações relacionadas ao cargo selecionado
                $('#cargoDocumentos').on('change', function() {
                    carregarInformacoesCargo();
                });

                // Função para carregar informações relacionadas à situação selecionada
                $('#situacaoDocumento').on('change', function() {
                    carregarInformacoesSituacao();
                });

                // Função para carregar informações relacionadas ao tipo de documento selecionado
                $('#tipoDocumento').on('change', function() {
                    carregarInformacoesTipoDocumento();
                });

                // Função para carregar informações relacionadas à empresa selecionada
                function carregarInformacoesEmpresa() {
                    var empresaSelecionada = $('#empresaDocumentos').val(); // Obter o valor da empresa selecionada
                    if (empresaSelecionada) {
                        $('#campoInformacaoEmpresa').val(empresaSelecionada); // Atualizar o valor do campo com a informação da empresa selecionada
                    } else {
                        $('#campoInformacaoEmpresa').attr('placeholder', 'Empresa'); // Definir o placeholder como 'Empresa' se nenhuma empresa for selecionada
                    }
                }

                // Função para carregar informações relacionadas à região selecionada
                function carregarInformacoesRegional() {
                    var regionalSelecionada = $('#regionalDocumentos').val(); // Obter o valor da região selecionada
                    if (regionalSelecionada) {
                        $('#campoInformacaoRegional').val(regionalSelecionada); // Atualizar o valor do campo com a informação da região selecionada
                    } else {
                        $('#campoInformacaoRegional').attr('placeholder', 'Regional'); // Definir o placeholder como 'Regional' se nenhuma região for selecionada
                    }
                }

                // Função para carregar informações relacionadas à unidade selecionada
                function carregarInformacoesUnidade() {
                    var unidadeSelecionada = $('#unidadeDocumentos').val(); // Obter o valor da unidade selecionada
                    if (unidadeSelecionada) {
                        $('#campoInformacaoUnidade').val(unidadeSelecionada); // Atualizar o valor do campo com a informação da unidade selecionada
                    } else {
                        $('#campoInformacaoUnidade').attr('placeholder', 'Unidade'); // Definir o placeholder como 'Unidade' se nenhuma unidade for selecionada
                    }
                }

                // Função para carregar informações relacionadas ao cargo selecionado
                function carregarInformacoesCargo() {
                    var cargoSelecionado = $('#cargoDocumentos').val(); // Obter o valor do cargo selecionado
                    if (cargoSelecionado) {
                        $('#campoInformacaoCargo').val(cargoSelecionado); // Atualizar o valor do campo com a informação do cargo selecionado
                    } else {
                        $('#campoInformacaoCargo').attr('placeholder', 'Cargo'); // Definir o placeholder como 'Cargo' se nenhum cargo for selecionado
                    }
                }

                // Função para carregar informações relacionadas à situação selecionada
                function carregarInformacoesSituacao() {
                    var situacaoSelecionada = $('#situacaoDocumento').val(); // Obter o valor da situação selecionada
                    if (situacaoSelecionada) {
                        $('#campoInformacaoSituacao').val(situacaoSelecionada); // Atualizar o valor do campo com a informação da situação selecionada
                    } else {
                        $('#campoInformacaoSituacao').attr('placeholder', 'Situação'); // Definir o placeholder como 'Situação' se nenhuma situação for selecionada
                    }
                }

                // Função para carregar informações relacionadas ao tipo de documento selecionado
                function carregarInformacoesTipoDocumento() {
                    var tipoDocumentoSelecionado = $('#tipoDocumento').val(); // Obter o valor do tipo de documento selecionado
                    if (tipoDocumentoSelecionado) {
                        $('#campoInformacaoTipoDocumento').val(tipoDocumentoSelecionado); // Atualizar o valor do campo com a informação do tipo de documento selecionado
                    } else {
                        $('#campoInformacaoTipoDocumento').attr('placeholder', 'Tipo de Documento'); // Definir o placeholder como 'Tipo de Documento' se nenhum tipo de documento for selecionado
                    }
                }
            });


            </script-->




            <div id="PendenciasASOForm" class="form-container">
                <div class="subheader2">
                    <p>Pendências ASO</p>
                </div>
                <form>
                    <div class="form-row">
                        <select id="empresaASO" name="empresaASO" placeholder="Empresa" >
                            <option value="empresaASO" disabled selected>Empresa</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <select id="RegionalASO" name="RegionalASO" placeholder="Regional" >
                            <option value="RegionalASO" disabled selected>Regional</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <select id="UnidadeASO" name="UnidadeASO" placeholder="Unidade" >
                            <option value="UnidadeASO" disabled selected>Unidade</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <input type="text" id="nomeASO" name="nomeASO" placeholder="Nome do Colaborador">
                    </div>
                    <div class="form-row">
                        <input type="text" id="matriculaASO" name="matriculaASO" placeholder="Matrícula">
                    </div>
                    <div class="form-row">
                        <input type="text" id="cpfASO" name="cpfASO" placeholder="CPF">
                    </div>
                    <div class="form-row">
                        <select id="CargoASO" name="CargoASO" placeholder="Cargo" >
                            <option value="CargoASO" disabled selected>Cargo</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <div class="date-row">
                            <input type="text" id="admissaoASO" placeholder="Admissão" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                        </div>
                        <div class="date-row">
                            <input type="text" id="desligamentoASO" placeholder="Desligamento" onfocus="(this.type='date')" onblur="(this.type='text')" pattern="\d{2}/\d{2}/\d{4}" title="Digite a data no formato dd/mm/aaaa">
                        </div>
                    </div>
                    <div class="form-row">
                        <select id="situacaoASO" name="situacaoASO" placeholder="Situação" >
                            <option value="" disabled selected> Situação </option>
                        </select>
                    </div>
                    <div class="form-row">
                        <select id="TipoDeDocumentoASO" name="TipoDeDocumentoASO" placeholder="Tipo de Documento" >
                            <option value="TipoDeDocumentoASO" disabled selected>Tipo de Documento</option>
                        </select>
                    </div>
                    <div class="form-row button-row">
                        <button id="pesquisarASO" type="button">Pesquisar</button>
                    </div>
                </form>
            </div>

            <!--script>
                document.getElementById('admissaoASO').addEventListener('blur', function() {
                    if (this.value !== '') {
                        var parts = this.value.split('-');
                        var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                        this.value = formattedDate;
                    }
                });
                document.getElementById('desligamentoASO').addEventListener('blur', function() {
                    if (this.value !== '') {
                        var parts = this.value.split('-');
                        var formattedDate = parts[2] + '/' + parts[1] + '/' + parts[0];
                        this.value = formattedDate;
                    }
                });
                </script-->


            <!--script>
                var urlCarregarRelatorio = "{% url 'carregar_relatorio_pendente_asos' %}";

                // Função genérica para carregar opções de um select
                function carregarOpcoes(selectId, propriedade, selecionada, placeholder) {
                    var select = document.getElementById(selectId);
                    if (selecionada !== '') {
                        return;
                    }
                    var xhr = new XMLHttpRequest();
                    xhr.open("GET", urlCarregarRelatorio, true);
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4 && xhr.status == 200) {
                            var documentos = JSON.parse(xhr.responseText);
                            var opcoesUnicas = new Set();
                            select.innerHTML = '<option value="" disabled selected>' + placeholder + '</option>';
                            documentos.forEach(function(documento) {
                                opcoesUnicas.add(documento[propriedade]);
                            });
                            opcoesUnicas.forEach(function(opcao) {
                                var option = document.createElement("option");
                                option.text = opcao;
                                option.value = opcao;
                                select.add(option);
                            });
                            if (selecionada !== '') {
                                select.value = selecionada;
                            }
                        }
                    };
                    xhr.send();
                }

                // Primeiro conjunto de scripts
                var empresaSelecionadaPrimeiro = '';

                function carregarEmpresasPrimeiro() {
                    carregarOpcoes("empresaASO", "empresa", empresaSelecionadaPrimeiro, "Empresa");
                }

                document.getElementById("empresaASO").addEventListener("change", function() {
                    empresaSelecionadaPrimeiro = this.value;
                });

                // Chamada da função carregarEmpresasPrimeiro() quando a janela terminar de carregar
                window.onload = function() {
                    carregarEmpresasPrimeiro();
                    carregarOpcoes("RegionalASO", "regional", "", "Regional"); // Chamando a função para carregar as opções do RegionalASO também
                    carregarOpcoes("UnidadeASO", "unidade", "", "Unidade"); // Chamando a função para carregar as opções do UnidadeASO também
                    carregarOpcoes("CargoASO", "cargo", "", "Cargo"); // Chamando a função para carregar as opções do CargoASO também
                    carregarOpcoes("situacaoASO", "status", "", "Situação"); // Chamando a função para carregar as opções do SituaçãoASO também
                    carregarOpcoes("TipoDeDocumentoASO", "tipo_documento", "", "Tipo de Documento"); // Chamando a função para carregar as opções do TipoDeDocumentoASO também
                };
            </script-->

            <!--script>
              function openSidebarASO() {
    // Obter o valor selecionado nos selects de empresa, regional, unidade, cargo, situação e tipo de documento
    const selectedEmpresa = document.getElementById('empresaASO').value;
    const selectedRegional = document.getElementById('RegionalASO').value;
    const selectedUnidade = document.getElementById('UnidadeASO').value;
    const selectedCargo = document.getElementById('CargoASO').value;
    const selectedSituacao = document.getElementById('situacaoASO').value;
    const selectedTipoDeDocumento = document.getElementById('TipoDeDocumentoASO').value;

    // Obter os valores dos inputs de texto para nome, matrícula, CPF, admissão e desligamento
    const nomeASO = document.getElementById('nomeASO').value.toLowerCase();
    const matriculaASO = document.getElementById('matriculaASO').value.toLowerCase();
    const cpfASO = document.getElementById('cpfASO').value.toLowerCase();
    const admissaoASO = document.getElementById('admissaoASO').value;
    const desligamentoASO = document.getElementById('desligamentoASO').value;

    // Realizar uma solicitação AJAX para a view
    const xhr = new XMLHttpRequest();
    xhr.open('GET', "{% url 'carregar_relatorio_pendente_asos' %}", true);
    xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
            const data = JSON.parse(xhr.responseText);
            const tbody = document.querySelector('#tabela-relatorio tbody');
            tbody.innerHTML = ''; // Limpar o conteúdo atual da tabela

            // Iterar sobre os dados e preencher a tabela
            data.forEach(function (item) {
                // Verificar se a linha corresponde a todos os filtros selecionados
                if ((selectedEmpresa === '' || item.empresa === selectedEmpresa) &&
                    (selectedRegional === '' || item.regional === selectedRegional) &&
                    (selectedUnidade === '' || item.unidade === selectedUnidade) &&
                    (selectedCargo === '' || item.cargo === selectedCargo) &&
                    (selectedSituacao === '' || item.status === selectedSituacao) &&
                    (selectedTipoDeDocumento === '' || item.tipo_documento === selectedTipoDeDocumento) &&
                    (nomeASO === '' || item.nome.toLowerCase().includes(nomeASO)) &&
                    (matriculaASO === '' || item.matricula.toLowerCase().includes(matriculaASO)) &&
                    (cpfASO === '' || item.cpf.toLowerCase().includes(cpfASO)) &&
                    (admissaoASO === '' || item.admissao === admissaoASO) &&
                    (desligamentoASO === '' || item.desligamento === desligamentoASO)) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.empresa}</td>
                        <td>${item.regional}</td>
                        <td>${item.unidade}</td>
                        <td>${item.nome}</td>
                        <td>${item.matricula}</td>
                        <td>${item.cpf}</td>
                        <td>${item.cargo}</td>
                        <td>${item.admissao}</td>
                        <td>${item.desligamento}</td>
                        <td>${item.status}</td>
                        <td>${item.tipo_documento}</td>
                        <td><button onclick="visualizarDocumento('${item.id}')">Visualizar</button></td>
                    `;
                    tbody.appendChild(row);
                }
            });

            // Abrir o sidebar após preencher a tabela
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.add('active');
        } else {
            console.error('Erro ao carregar os dados da view');
        }
    };
    xhr.send();
}

// Adicionando evento de clique ao botão de pesquisarASO
const pesquisarBtnASO = document.getElementById('pesquisarASO');
pesquisarBtnASO.addEventListener('click', openSidebarASO);

// Função para fechar o sidebar do ASO
function closeSidebarASO() {
    const sidebar = document.querySelector('.sidebar');
    sidebar.classList.remove('active');
}

// Adicionando evento de clique ao botão de fechar do ASO
const closeBtnASO = document.querySelector('.close-btn-aso');
closeBtnASO.addEventListener('click', closeSidebarASO);

// Função para visualizar o documento (substitua por sua lógica real)
function visualizarDocumento(id) {
    console.log('Visualizando documento com o ID:', id);
}

            </script-->












            <div id="PontoInexistentesForm" class="form-container">
                <div class="subheader2">
                    <p>CARTÕES DE PONTO INEXISTENTES</p>
                </div>
                <form>
                    <div class="form-row">
                        <select id="empresaCartoes" name="empresaCartoes" placeholder="Empresa" >
                            <option value="empresaCartoes" disabled selected>Empresa</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <select id="RegionalCartoes" name="RegionalCartoes" placeholder="Regional" >
                            <option value="RegionalCartoes" disabled selected>Regional</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <select id="UnidadeCartoes" name="UnidadeCartoes" placeholder="Unidade" >
                            <option value="UnidadeCartoes" disabled selected>Unidade</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <input type="text" id="nomeCartoes" name="nomeCartoes" placeholder="Nome do Colaborador">
                    </div>

                    <div class="form-row">
                        <select id="situacaoCartoes" name="situacaoCartoes" placeholder="Situação">
                            <option value="" disabled selected> Situação </option>
                            <option value="ativo">Ativo</option>
                            <option value="inativo">Inativo</option>
                            <option value="afastado">Afastado</option>
                        </select>
                    </div>
                    <div class="form-row">
                        <div class="date-row">
                            <select id="mesCartoes" name="mesCartoes">
                                <option value="01">JAN</option>
                                <option value="02">FEV</option>
                                <option value="03">MAR</option>
                                <option value="04">ABR</option>
                                <option value="05">MAI</option>
                                <option value="06">JUN</option>
                                <option value="07">JUL</option>
                                <option value="08">AGO</option>
                                <option value="09">SET</option>
                                <option value="10">OUT</option>
                                <option value="11">NOV</option>
                                <option value="12">DEZ</option>
                            </select>
                        </div>

                        <div class="date-row">
                            <input type="number" id="anoCartoes" name="anoCartoes" placeholder="Ano" min="1900" max="2100" step="1">
                        </div>
                    </div>

                    <div class="form-row button-row">
                        <button id="pesquisarCartoes" type="button">Pesquisar</button>
                    </div>
                </form>
            </div>





            <!--script>
                document.addEventListener('DOMContentLoaded', function() {
                    carregarEmpresasCartoes();
                    carregarRegionalCartoes();
                    carregarUnidadeCartoes();
                });

                function carregarEmpresasCartoes() {
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', "{% url 'listar_cartoes_ponto_inexistentes' %}?tipo=empresa", true);
                    xhr.onload = function () {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            const data = JSON.parse(xhr.responseText);
                            const selectEmpresa = document.getElementById('empresaCartoes');
                            selectEmpresa.innerHTML = '';
                            const defaultOption = document.createElement('option');
                            defaultOption.value = '';
                            defaultOption.textContent = 'Empresa';
                            defaultOption.disabled = true;
                            defaultOption.selected = true;
                            selectEmpresa.appendChild(defaultOption);
                            const adicionadas = {};
                            data.forEach(function (item) {
                                if (!adicionadas[item.empresa]) {
                                    const option = document.createElement('option');
                                    option.value = item.id;
                                    option.textContent = item.empresa;
                                    selectEmpresa.appendChild(option);
                                    adicionadas[item.empresa] = true;
                                }
                            });
                        } else {
                            console.error('Erro ao carregar as empresas');
                        }
                    };
                    xhr.send();
                }

                function carregarRegionalCartoes() {
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', "{% url 'listar_cartoes_ponto_inexistentes' %}?tipo=regional", true);
                    xhr.onload = function () {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            const data = JSON.parse(xhr.responseText);
                            const selectRegional = document.getElementById('RegionalCartoes');
                            selectRegional.innerHTML = '';
                            const defaultOption = document.createElement('option');
                            defaultOption.value = '';
                            defaultOption.textContent = 'Regional';
                            defaultOption.disabled = true;
                            defaultOption.selected = true;
                            selectRegional.appendChild(defaultOption);
                            const adicionadas = {};
                            data.forEach(function (item) {
                                if (!adicionadas[item.regional]) {
                                    const option = document.createElement('option');
                                    option.value = item.id;
                                    option.textContent = item.regional;
                                    selectRegional.appendChild(option);
                                    adicionadas[item.regional] = true;
                                }
                            });
                        } else {
                            console.error('Erro ao carregar as regionais');
                        }
                    };
                    xhr.send();
                }

                function carregarUnidadeCartoes() {
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', "{% url 'listar_cartoes_ponto_inexistentes' %}?tipo=unidade", true);
                    xhr.onload = function () {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            const data = JSON.parse(xhr.responseText);
                            const selectUnidade = document.getElementById('UnidadeCartoes');
                            selectUnidade.innerHTML = '';
                            const defaultOption = document.createElement('option');
                            defaultOption.value = '';
                            defaultOption.textContent = 'Unidade';
                            defaultOption.disabled = true;
                            defaultOption.selected = true;
                            selectUnidade.appendChild(defaultOption);
                            const adicionadas = {};
                            data.forEach(function (item) {
                                if (!adicionadas[item.unidade]) {
                                    const option = document.createElement('option');
                                    option.value = item.id;
                                    option.textContent = item.unidade;
                                    selectUnidade.appendChild(option);
                                    adicionadas[item.unidade] = true;
                                }
                            });
                        } else {
                            console.error('Erro ao carregar as unidades');
                        }
                    };
                    xhr.send();
                }
            </script-->


            <div class="sidebar2">
                <button class="close-btn2">Fechar</button>
                <div class="table-container">
                    <div class="subheader3">
                        <p>RELATÓRIOS</p>
                    </div>
                    <div class="export-buttons">
                      <select id="exportFormat">
                          <option value="xlsx">Exportar para XLSX</option>
                          <option value="csv">Exportar para CSV</option>
                          <option value="pdf">Exportar para PDF</option>
                      </select>
                      <button onclick="authenticateDownload()"><i class="bi bi-download"></i></button>
                    </div>

                    <div class="search-container">
                      <input type="text" id="searchInput" placeholder="Pesquisar...">
                    </div>
                        <div class="rows-per-page">
                            <label for="rowsPerPage">Linhas por página:</label>
                            <select id="rowsPerPage" onchange="changeRowsPerPage()">
                              <option value="8">8</option>
                              <option value="10" selected>10</option>
                              <option value="15">15</option>
                              <option value="20">20</option>
                              <option value="40">40</option>
                              <option value="100">100</option>
                          </select>
                        </div>
                    <table id="tabela-relatorio2">
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Regional</th>
                                <th>Unidade</th>
                                <th>Nome do Colaborador</th>
                                <th>Matrícula</th>
                                <th>CPF</th>
                                <th>Admissão</th>
                                <th>Desligamento</th>
                                <th>Situação</th>
                                <th>JAN</th>
                                <th>FEV</th>
                                <th>MAR</th>
                                <th>ABR</th>
                                <th>MAI</th>
                                <th>JUN</th>
                                <th>JUL</th>
                                <th>AGO</th>
                                <th>SET</th>
                                <th>OUT</th>
                                <th>NOV</th>
                                <th>DEZ</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Os dados da tabela serão preenchidos dinamicamente aqui -->
                        </tbody>
                    </table>
                    <div class="pagination" id="pagination">
                        <button id="previous-page">&lt; < </button>
                        <span id="page-info"></span>
                        <button id="next-page"> > &gt;</button>
                    </div>
                </div>

            </div>

            <!--script>
                function openSidebarCartoes() {
                    // Realizar uma solicitação AJAX para a view
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', "{% url 'listar_cartoes_ponto_inexistentes' %}", true);
                    xhr.onload = function () {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            const data = JSON.parse(xhr.responseText);
                            console.log("Dados recebidos:", data); // Adicione esta linha para verificar os dados recebidos

                            // Obtendo os textos selecionados nos campos de seleção
                            const empresaSelecionada = document.getElementById('empresaCartoes').options[document.getElementById('empresaCartoes').selectedIndex].text;
                            const regionalSelecionada = document.getElementById('RegionalCartoes').options[document.getElementById('RegionalCartoes').selectedIndex].text;
                            const unidadeSelecionada = document.getElementById('UnidadeCartoes').options[document.getElementById('UnidadeCartoes').selectedIndex].text;
                            const nomeColaborador = document.getElementById('nomeCartoes').value.trim();
                            const anoSelecionado = document.getElementById('anoCartoes').value;

                            console.log("Opção selecionada para Empresa:", empresaSelecionada);
                            console.log("Opção selecionada para Regional:", regionalSelecionada);
                            console.log("Opção selecionada para Unidade:", unidadeSelecionada);
                            console.log("Nome do Colaborador:", nomeColaborador);
                            console.log("Ano selecionado:", anoSelecionado);

                            const tbody = document.querySelector('#tabela-relatorio2 tbody');
                            tbody.innerHTML = ''; // Limpar o conteúdo atual da tabela

                            // Filtrando os dados da tabela com base nos valores selecionados
                            const dadosFiltrados = data.filter(function (item) {
                                // Verificando se o filtro está vazio ou se corresponde ao valor do item
                                const filtroEmpresa = empresaSelecionada === 'Empresa' || item.empresa === empresaSelecionada;
                                const filtroRegional = regionalSelecionada === 'Regional' || item.regional === regionalSelecionada;
                                const filtroUnidade = unidadeSelecionada === 'Unidade' || item.unidade === unidadeSelecionada;
                                const filtroNome = nomeColaborador === '' || item.colaborador.toLowerCase().includes(nomeColaborador.toLowerCase());
                                const filtroAno = anoSelecionado === '' || parseInt(item.admissao.split('/')[2]) <= parseInt(anoSelecionado);
                                return filtroEmpresa && filtroRegional && filtroUnidade && filtroNome && filtroAno;
                            });

                            console.log("Dados filtrados:", dadosFiltrados); // Adicione esta linha para verificar os dados filtrados

                            // Iterar sobre os dados filtrados e preencher a tabela
                            dadosFiltrados.forEach(function (item) {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${item.empresa}</td>
                                    <td>${item.regional}</td>
                                    <td>${item.unidade}</td>
                                    <td>${item.colaborador}</td>
                                    <td>${item.matricula}</td>
                                    <td>${item.cpf}</td>
                                    <td>${item.admissao}</td>
                                    <td>${item.desligamento}</td>
                                    <td>${item.status}</td>
                                    <td data-mes="JAN"></td>
                                    <td data-mes="FEV"></td>
                                    <td data-mes="MAR"></td>
                                    <td data-mes="ABR"></td>
                                    <td data-mes="MAI"></td>
                                    <td data-mes="JUN"></td>
                                    <td data-mes="JUL"></td>
                                    <td data-mes="AGO"></td>
                                    <td data-mes="SET"></td>
                                    <td data-mes="OUT"></td>
                                    <td data-mes="NOV"></td>
                                    <td data-mes="DEZ"></td>
                                `;

                                tbody.appendChild(row);

                                // Verificar se o cartão de ponto existe
                                if (item.existente === 'Sim') {
                                    const dataCartao = new Date(item.data);
                                    const mes = dataCartao.getMonth(); // 0 para Janeiro, 1 para Fevereiro, etc.
                                    const mesAbreviado = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'][mes];
                                    row.querySelector(`td[data-mes="${mesAbreviado}"]`).textContent = ''; // Deixa o campo vazio
                                } else {
                                    // Se o cartão de ponto não existe, coloque 'FALTA' nos meses correspondentes
                                    const mesesFaltantes = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];
                                    mesesFaltantes.forEach(mesFaltante => {
                                        row.querySelector(`td[data-mes="${mesFaltante}"]`).textContent = 'FALTA';
                                    });
                                }
                            });

                            // Abrir o sidebar após preencher a tabela
                            const sidebar = document.querySelector('.sidebar2');
                            sidebar.classList.add('active');
                        } else {
                            console.error('Erro ao carregar os dados da view');
                        }
                    };

                    xhr.send();
                }

                // Adicionando evento de clique ao botão de pesquisarCartoes
                const pesquisarBtnCartoes = document.getElementById('pesquisarCartoes');
                pesquisarBtnCartoes.addEventListener('click', openSidebarCartoes);

                // Adicionando evento de clique ao botão Fechar
                const closeBtn2 = document.querySelector('.close-btn2');
                closeBtn2.addEventListener('click', function () {
                    // Remover a classe 'active' do sidebar
                    const sidebar = document.querySelector('.sidebar2');
                    sidebar.classList.remove('active');
                });

                // Função para visualizar o documento (implemente conforme necessário)
                function visualizarDocumento(id) {
                    console.log('Visualizando documento com o ID:', id);
                }
                </script-->



<style>
    .form-floating>label {
        position: absolute;
        top: 50%;
        left: 1rem;
        transform: translateY(-50%);
        pointer-events: none;
        transition: all 0.2s;
    }
    .form-control:focus~label,
    .form-control:not(:placeholder-shown)~label,
    .form-control:valid~label {
        top: 0;
        left: 1rem;
        transform: translateY(-110%);
        font-size: 0.75rem;
        color: #6c757d;
    }
    .form-control {
        height: calc(3.5rem + 2px);
        padding: 1rem;
    }
</style>



            <!-- <li class="item-menu" id="DocumentosAuditorias" data-target="DocumentosAuditoriasForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos para Auditorias</span>
                </a>
            </li> -->

            <!--<li class="item-menu" id="documentosAVencerItem" data-target="documentosAVencerForm">
                <a href="#">
                    <span class="icon"><i class="bi bi-record2-fill"></i></span>
                    <span class="txt-link">Documentos Existentes para Auditorias</span>
                </a>
            </li>-->

            <div id="DocumentosAuditoriasForm" class="form-container">
        <div class="subheader2">
            <p>DOCUMENTOS PARA AUDITORIAS</p>
        </div>
        <form>
            <div class="form-row">
                <select id="empresa" name="empresa" placeholder="Empresa" onclick="carregarEmpresas()">
                    <option value="empresa" disabled selected>Empresa</option>
                </select>
            </div>
            <div class="form-row">
                <select id="Regional" name="Regional" placeholder="Regional" onclick="carregarRegional()">
                    <option value="Regional" disabled selected>Regional</option>
                </select>
            </div>
            <div class="form-row">
                <select id="Unidade" name="Unidade" placeholder="Unidade" onclick="carregarUnidade()">
                    <option value="Unidade" disabled selected>Unidade</option>
                </select>
            </div>
            <div class="form-row">
                <input type="text" id="nome" name="nome" placeholder="Nome do Colaborador">
            </div>
            <div class="form-row">
                <input type="text" id="matricula" name="matricula" placeholder="Matrícula">
            </div>
            <div class="form-row">
                <input type="text" id="cpf" name="cpf" placeholder="CPF">
            </div>
            <div class="form-row">
                <select id="Cargo" name="Cargo" placeholder="Cargo" onclick="carregarCargo()">
                    <option value="Cargo" disabled selected>Cargo</option>
                </select>
            </div>
            <div class="form-row">
                <div class="date-row">
                    <input type="date" id="admissao" name="admissao" placeholder="Admissão">
                </div>
                <div class="date-row">
                    <input type="date" id="desligamento" name="desligamento" placeholder="Desligamento">
                </div>
            </div>

            <div class="form-row">
                <select id="situacao" name="situacao" placeholder="Situação">
                    <option value="" disabled selected> Situação </option>
                    <option value="ativo">Ativo</option>
                    <option value="inativo">Inativo</option>
                </select>
            </div>
            <div class="form-row">
                <select id="Tipo de Documento" name="Tipo de Documento" placeholder="Cargo" onclick="carregarTipoDeDocumento()">
                    <option value="Tipo de Documento" disabled selected>Tipo de Documento</option>
                </select>
            </div>
            <div class="form-row button-row">
                <button type="submit">Pesquisar</button>
            </div>
        </form>
    </div>


    @csrf_exempt
def gerenciar_colaborador(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        logger.debug('Dados recebidos: %s', data)  # Log dos dados recebidos
        if 'excluir' in data:
            colaborador_id = data.get('id')
            colaborador = Colaborador.objects.get(id=colaborador_id)
            colaborador.delete()
            logger.info('Colaborador excluído: ID %s', colaborador_id)
            return HttpResponse(status=204)
        else:
            colaborador_id = data.get('id', None)
            if colaborador_id:
                colaborador = Colaborador.objects.get(id=colaborador_id)
                # Atualiza os campos do colaborador com os novos valores recebidos
                colaborador.nome = data.get('nome', colaborador.nome)
                colaborador.matricula = data.get('matricula', colaborador.matricula)
                colaborador.cpf = data.get('cpf', colaborador.cpf)
                colaborador.cargo_id = data.get('cargo_id', colaborador.cargo_id)
                colaborador.status_id = data.get('status_id', colaborador.status_id)
                colaborador.admissao = data.get('admissao', colaborador.admissao)
                colaborador.desligamento = data.get('desligamento', colaborador.desligamento)
                colaborador.email = data.get('email', colaborador.email)
                colaborador.pcd = data.get('pcd', colaborador.pcd)
                colaborador.save()
                logger.info('Colaborador atualizado: ID %s', colaborador_id)
                return JsonResponse({'status': 'success', 'message': 'Colaborador atualizado com sucesso'})
            else:
                # Cria um novo colaborador
                novo_colaborador = Colaborador.objects.create(
                    nome=data['nome'],
                    matricula=data['matricula'],
                    cpf=data['cpf'],
                    cargo_id=data['cargo_id'],
                    status_id=data['status_id'],
                    admissao=data['admissao'],
                    desligamento=data.get('desligamento'),
                    email=data.get('email'),
                    pcd=data['pcd']
                )
                logger.info('Novo colaborador cadastrado: %s', novo_colaborador)
                return JsonResponse({'status': 'success', 'message': 'Colaborador criado com sucesso'})

    elif request.method == 'GET':
        colaboradores = Colaborador.objects.all().values(
            'id', 'nome', 'matricula', 'cpf', 'cargo__descricao', 'status__descricao',
            'admissao', 'desligamento', 'email', 'pcd'
        )
        logger.info('Consulta de todos os colaboradores realizada')
        return JsonResponse(list(colaboradores), safe=False)
    else:
        logger.error('Método não permitido: %s', request.method)
        return JsonResponse({'status': 'error', 'message': 'Método não permitido'}, status=405)



<div id="RelatoriosGerenciaisForm" class="form-container">
    <div class="subheader2">
        <p>RELATÓRIOS GERENCIAIS</p>
    </div>
    <form>
        <div class="form-row">
            <div class="date-row">
                <input type="date" id="dados ate o dia" name="dados ate o dia" placeholder="Dados até o dia">
            </div>
        </div>

        <div class="form-row button-row">
            <button type="submit">Pesquisar</button>
        </div>
    </form>
</div>


<div id="data-endpoint" data-url="{% url 'relatorio_gerencias' %}" style="display:none;"></div>

<!--script>
    document.addEventListener('DOMContentLoaded', function() {
        var url = document.getElementById('data-endpoint').dataset.url;
        fetch(url)
            .then(response => response.json())
            .then(data => {
            // Processamento dos dados como anteriormente...
        })
            .catch(error => console.error('Erro ao buscar dados:', error));
    });


</script-->


codigo js do andre:

 document.addEventListener('DOMContentLoaded', function() {
        document.getElementById("cadastrarFuncionario").addEventListener("click", function() {
            // Coletar os valores dos campos do formulário, verificando se os elementos existem antes de acessar suas propriedades
            var empresaInput = document.getElementById("inputEmpresa");
            var regionalInput = document.getElementById("inputRegional");
            var unidadeInput = document.getElementById("inputUnidade");
            var matriculaInput = document.getElementById("inputMatricula");
            var nomeInput = document.getElementById("inputNome");
            var cargoSelect = document.getElementById("selectCargo");
            var admissaoInput = document.getElementById("inputAdmissao");
            var cpfInput = document.getElementById("inputCPF");
            var pcdSelect = document.getElementById("pcdSelect");
            var situacaoSelect = document.getElementById("situacaoSelect");
            var modopontoSelect = document.getElementById("modopontoSelect");
            var desligamentoInput = document.getElementById("inputDesligamento");

            // Checa se os elementos existem e então acessa suas propriedades 'value'
            var empresa = empresaInput ? empresaInput.value : '';
            var regional = regionalInput ? regionalInput.value : '';
            var unidade = unidadeInput ? unidadeInput.value : '';
            var matricula = matriculaInput ? matriculaInput.value : '';
            var nome = nomeInput ? nomeInput.value : '';
            var cargo = cargoSelect ? cargoSelect.value : '';
            var admissao = admissaoInput ? formatDate(admissaoInput.value) : '';
            var cpf = cpfInput ? cpfInput.value : '';
            var pcd = pcdSelect ? pcdSelect.value : '';
            var situacao = situacaoSelect ? situacaoSelect.value : '';
            var modoponto = modopontoSelect ? modopontoSelect.value : '';
            var desligamento = desligamentoInput ? formatDate(desligamentoInput.value) : '';

            // Enviar os dados para o servidor via AJAX
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "{% url 'cadastrar_funcionario' %}", true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            // Obter o token CSRF e incluí-lo nos cabeçalhos da solicitação
            var csrftoken = getCookie('csrftoken');
            xhr.setRequestHeader('X-CSRFToken', csrftoken);

            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    console.log(response); // Exibir a resposta do servidor no console para depuração
                }
            };

            var data = JSON.stringify({
                empresa: empresa,
                regional: regional,
                unidade: unidade,
                matricula: matricula,
                nome: nome,
                cargo: cargo,
                admissao: admissao,
                cpf: cpf,
                pcd: pcd,
                situacao: situacao,
                modoponto: modoponto,
                desligamento: desligamento
            });
            xhr.send(data);
        });

        // Função para obter o valor do cookie CSRF
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    });


    class CadastrarFuncionarioView(View):
    def post(self, request, *args, **kwargs):
        data = json.loads(request.body)

        # Exclusão de um colaborador existente
        if 'excluir' in data:
            try:
                colaborador_id = data.get('id')
                colaborador = Colaborador.objects.get(id=colaborador_id)
                colaborador.delete()
                logger.info('Dados recebidos: %s', data)
                logger.info('Colaborador excluído: ID %s', colaborador_id)
                return JsonResponse({'mensagem': 'Colaborador excluído com sucesso!'}, status=204)
            except json.JSONDecodeError:
                logger.error('Erro na decodificação do JSON')
                return JsonResponse({'mensagem': 'Formato de JSON inválido.'}, status=400)
            except Colaborador.DoesNotExist:
                logger.error('Erro ao processar a solicitação: %s', str(e))
                return JsonResponse({'mensagem': 'Colaborador não encontrado.'}, status=404)

        # Atualização de um colaborador existente
        colaborador_id = data.get('id', None)
        if colaborador_id:
            try:
                colaborador = Colaborador.objects.get(id=colaborador_id)
                for field in ['nome', 'matricula', 'cpf', 'cargo', 'status', 'admissao', 'desligamento', 'email', 'pcd']:
                    if field in data:
                        setattr(colaborador, field, data[field])
                colaborador.save()
                logger.info('Colaborador atualizado: ID %s', colaborador_id)
                return JsonResponse({'mensagem': 'Colaborador atualizado com sucesso!'})
            except Colaborador.DoesNotExist:
                return JsonResponse({'mensagem': 'Colaborador não encontrado.'}, status=404)

        # Criação de novo colaborador
        # Buscar ou criar Empresa, Regional e Unidade
        empresa_nome = data.get('empresa')
        empresa, _ = Empresa.objects.get_or_create(nome=empresa_nome)

        regional_nome = data.get('regional')
        regional, _ = Regional.objects.get_or_create(nome=regional_nome, empresa=empresa)

        unidade_nome = data.get('unidade')
        unidade, _ = Unidade.objects.get_or_create(nome=unidade_nome, regional=regional)

        # Buscar ou criar Cargo
        cargo_nome = data.get('cargo')
        if not cargo_nome:
            return JsonResponse({'mensagem': 'Nome do cargo é obrigatório!'}, status=400)
        cargo = Cargo.objects.filter(nome=cargo_nome).first()
        if not cargo:
            cargo = Cargo.objects.create(nome=cargo_nome, unidade=unidade)
            logger.info(f'Cargo criado: {cargo_nome}')

        # Buscar ou criar Situação
        status_nome = data.get('situacao')
        if not status_nome:
            return JsonResponse({'mensagem': 'Situação é obrigatória!'}, status=400)
        status, _ = Situacao.objects.get_or_create(nome=status_nome, cargo=cargo)

        # Validação da data de admissão
        data_admissao = data.get('admissao')
        if not data_admissao:
            return JsonResponse({'mensagem': 'A data de admissão é obrigatória!'}, status=400)
        try:
            data_admissao = datetime.strptime(data_admissao, '%Y-%m-%d')
        except ValueError:
            return JsonResponse({'mensagem': 'Formato de data de admissão inválido. Use YYYY-MM-DD.'}, status=400)

        # Validação opcional para a data de desligamento
        data_desligamento = data.get('desligamento')
        if data_desligamento:
            try:
                data_desligamento = datetime.strptime(data_desligamento, '%Y-%m-%d')
            except ValueError:
                return JsonResponse({'mensagem': 'Formato de data de desligamento inválido. Use YYYY-MM-DD.'},
                                    status=400)

        # Criar novo colaborador usando as datas validadas
        novo_colaborador = Colaborador(
            empresa=empresa,
            regional=regional,
            unidade=unidade,
            matricula=data['matricula'],
            nome=data['nome'],
            cargo=cargo,
            admissao=data_admissao,
            cpf=data['cpf'],
            pcd=data['pcd'],
            status=status,
            modo_ponto=data.get('modoponto'),
            desligamento=data_desligamento,
            email=data.get('email', None)
        )
        novo_colaborador.save()
        logger.info('Novo colaborador cadastrado: %s', novo_colaborador)
        return JsonResponse({'mensagem': 'Funcionário cadastrado com sucesso!'})

    def get(self, request, *args, **kwargs):
        colaboradores_list = Colaborador.objects.all().select_related('empresa', 'regional', 'unidade', 'cargo', 'status')
        paginator = Paginator(colaboradores_list, 100)  # Paginando em lotes de 100

        # Obtendo o número da página do parâmetro GET (querystring)
        page_number = request.GET.get('page', 1)
        colaboradores = paginator.get_page(page_number)

        data = [
            {
                'id': colaborador.id,
                'nome': colaborador.nome,
                'matricula': colaborador.matricula,
                'cpf': colaborador.cpf,
                'cargo': colaborador.cargo.nome if colaborador.cargo else '',
                'status': colaborador.status.nome if colaborador.status else '',
                'admissao': colaborador.admissao.strftime('%d/%m/%Y') if colaborador.admissao else 'Não Definido',
                'desligamento': colaborador.desligamento.strftime(
                    '%d/%m/%Y') if colaborador.desligamento else 'Não Definido',
                'email': colaborador.email,
                'empresa': colaborador.empresa.nome if colaborador.empresa else '',
                'regional': colaborador.regional.nome if colaborador.regional else '',
                'unidade': colaborador.unidade.nome if colaborador.unidade else ''
            }
            for colaborador in colaboradores
        ]
        return JsonResponse({'data': data, 'has_next': colaboradores.has_next(), 'has_previous': colaboradores.has_previous(),
                             'num_pages': paginator.num_pages}, safe=False)



